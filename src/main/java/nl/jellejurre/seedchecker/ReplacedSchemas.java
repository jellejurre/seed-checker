package nl.jellejurre.seedchecker;

import com.google.common.collect.ImmutableMap;
import com.mojang.datafixers.DSL;
import com.mojang.datafixers.DataFixer;
import com.mojang.datafixers.DataFixerBuilder;
import com.mojang.datafixers.Typed;
import com.mojang.datafixers.schemas.Schema;
import net.minecraft.SharedConstants;
import net.minecraft.datafixer.Schemas;
import net.minecraft.datafixer.TypeReferences;
import net.minecraft.datafixer.fix.*;
import net.minecraft.datafixer.mapping.LegacyBiomeMapping;
import net.minecraft.datafixer.mapping.LegacyCoralBlockMapping;
import net.minecraft.datafixer.mapping.LegacyCoralFanBlockMapping;
import net.minecraft.datafixer.mapping.LegacyDyeItemMapping;
import net.minecraft.datafixer.schema.*;
import net.minecraft.util.Util;

import java.util.Map;
import java.util.Objects;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;

public class ReplacedSchemas extends Schemas {
    private static final BiFunction<Integer, Schema, Schema> EMPTY = Schema::new;
    private static final BiFunction<Integer, Schema, Schema> EMPTY_IDENTIFIER_NORMALIZE = IdentifierNormalizingSchema::new;
    private static final DataFixer FIXER = create();

    private static DataFixer create() {
        DataFixerBuilder dataFixerBuilder = new LazyDataFixerBuilder(SharedConstants.getGameVersion().getWorldVersion());
        build(dataFixerBuilder);
        return dataFixerBuilder.build(Util.getBootstrapExecutor());
    }

    public static DataFixer getFixer() {
        return FIXER;
    }
    private static void build(DataFixerBuilder dataFixerBuilder) {
        Schema schema = dataFixerBuilder.addSchema(99, Schema99::new);
        Schema schema2 = dataFixerBuilder.addSchema(100, Schema100::new);
        dataFixerBuilder.addFixer(new EntityEquipmentToArmorAndHandFix(schema2, true));
        Schema schema3 = dataFixerBuilder.addSchema(101, EMPTY);
        dataFixerBuilder.addFixer(new BlockEntitySignTextStrictJsonFix(schema3, false));
        Schema schema4 = dataFixerBuilder.addSchema(102, Schema102::new);
        dataFixerBuilder.addFixer(new ItemIdFix(schema4, true));
        dataFixerBuilder.addFixer(new ItemPotionFix(schema4, false));
        Schema schema5 = dataFixerBuilder.addSchema(105, EMPTY);
        dataFixerBuilder.addFixer(new ItemSpawnEggFix(schema5, true));
        Schema schema6 = dataFixerBuilder.addSchema(106, Schema106::new);
        dataFixerBuilder.addFixer(new MobSpawnerEntityIdentifiersFix(schema6, true));
        Schema schema7 = dataFixerBuilder.addSchema(107, Schema107::new);
        dataFixerBuilder.addFixer(new EntityMinecartIdentifiersFix(schema7, true));
        Schema schema8 = dataFixerBuilder.addSchema(108, EMPTY);
        dataFixerBuilder.addFixer(new EntityStringUuidFix(schema8, true));
        Schema schema9 = dataFixerBuilder.addSchema(109, EMPTY);
        dataFixerBuilder.addFixer(new EntityHealthFix(schema9, true));
        Schema schema10 = dataFixerBuilder.addSchema(110, EMPTY);
        dataFixerBuilder.addFixer(new EntityHorseSaddleFix(schema10, true));
        Schema schema11 = dataFixerBuilder.addSchema(111, EMPTY);
        dataFixerBuilder.addFixer(new HangingEntityFix(schema11, true));
        Schema schema12 = dataFixerBuilder.addSchema(113, EMPTY);
        dataFixerBuilder.addFixer(new EntityRedundantChanceTagsFix(schema12, true));
        Schema schema13 = dataFixerBuilder.addSchema(135, Schema135::new);
        dataFixerBuilder.addFixer(new EntityRidingToPassengerFix(schema13, true));
        Schema schema14 = dataFixerBuilder.addSchema(143, Schema143::new);
        dataFixerBuilder.addFixer(new EntityTippedArrowFix(schema14, true));
        Schema schema15 = dataFixerBuilder.addSchema(147, EMPTY);
        dataFixerBuilder.addFixer(new EntityArmorStandSilentFix(schema15, true));
        Schema schema16 = dataFixerBuilder.addSchema(165, EMPTY);
        dataFixerBuilder.addFixer(new ItemWrittenBookPagesStrictJsonFix(schema16, true));
        Schema schema17 = dataFixerBuilder.addSchema(501, Schema501::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema17, "Add 1.10 entities fix", TypeReferences.ENTITY));
        Schema schema18 = dataFixerBuilder.addSchema(502, EMPTY);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema18, "cooked_fished item renamer", (string) -> {
            return Objects.equals(IdentifierNormalizingSchema.normalize(string), "minecraft:cooked_fished") ? "minecraft:cooked_fish" : string;
        }));
        dataFixerBuilder.addFixer(new EntityZombieVillagerTypeFix(schema18, false));
        Schema schema19 = dataFixerBuilder.addSchema(505, EMPTY);
        dataFixerBuilder.addFixer(new OptionsForceVBOFix(schema19, false));
        Schema schema20 = dataFixerBuilder.addSchema(700, Schema700::new);
        dataFixerBuilder.addFixer(new EntityElderGuardianSplitFix(schema20, true));
        Schema schema21 = dataFixerBuilder.addSchema(701, Schema701::new);
        dataFixerBuilder.addFixer(new EntitySkeletonSplitFix(schema21, true));
        Schema schema22 = dataFixerBuilder.addSchema(702, Schema702::new);
        dataFixerBuilder.addFixer(new EntityZombieSplitFix(schema22, true));
        Schema schema23 = dataFixerBuilder.addSchema(703, Schema703::new);
        dataFixerBuilder.addFixer(new EntityHorseSplitFix(schema23, true));
        Schema schema24 = dataFixerBuilder.addSchema(704, Schema704::new);
        dataFixerBuilder.addFixer(new BlockEntityIdFix(schema24, true));
        Schema schema25 = dataFixerBuilder.addSchema(705, Schema705::new);
        dataFixerBuilder.addFixer(new EntityIdFix(schema25, true));
        Schema schema26 = dataFixerBuilder.addSchema(804, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ItemBannerColorFix(schema26, true));
        Schema schema27 = dataFixerBuilder.addSchema(806, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ItemWaterPotionFix(schema27, false));
        Schema schema28 = dataFixerBuilder.addSchema(808, Schema808::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema28, "added shulker box", TypeReferences.BLOCK_ENTITY));
        Schema schema29 = dataFixerBuilder.addSchema(808, 1, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityShulkerColorFix(schema29, false));
        Schema schema30 = dataFixerBuilder.addSchema(813, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ItemShulkerBoxColorFix(schema30, false));
        dataFixerBuilder.addFixer(new BlockEntityShulkerBoxColorFix(schema30, false));
        Schema schema31 = dataFixerBuilder.addSchema(816, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OptionsLowerCaseLanguageFix(schema31, false));
        Schema schema32 = dataFixerBuilder.addSchema(820, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema32, "totem item renamer", replacing("minecraft:totem", "minecraft:totem_of_undying")));
        Schema schema33 = dataFixerBuilder.addSchema(1022, Schema1022::new);
        dataFixerBuilder.addFixer(new WriteAndReadFix(schema33, "added shoulder entities to players", TypeReferences.PLAYER));
        Schema schema34 = dataFixerBuilder.addSchema(1125, Schema1125::new);
        dataFixerBuilder.addFixer(new BedBlockEntityFix(schema34, true));
        dataFixerBuilder.addFixer(new BedItemColorFix(schema34, false));
        Schema schema35 = dataFixerBuilder.addSchema(1344, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OptionsKeyLwjgl3Fix(schema35, false));
        Schema schema36 = dataFixerBuilder.addSchema(1446, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OptionsKeyTranslationFix(schema36, false));
        Schema schema37 = dataFixerBuilder.addSchema(1450, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BlockStateStructureTemplateFix(schema37, false));
        Schema schema38 = dataFixerBuilder.addSchema(1451, Schema1451::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema38, "AddTrappedChestFix", TypeReferences.BLOCK_ENTITY));
        Schema schema39 = dataFixerBuilder.addSchema(1451, 1, Schema1451v1::new);
        dataFixerBuilder.addFixer(new ChunkPalettedStorageFix(schema39, true));
        Schema schema40 = dataFixerBuilder.addSchema(1451, 2, Schema1451v2::new);
        dataFixerBuilder.addFixer(new BlockEntityBlockStateFix(schema40, true));
        Schema schema41 = dataFixerBuilder.addSchema(1451, 3, Schema1451v3::new);
        dataFixerBuilder.addFixer(new EntityBlockStateFix(schema41, true));
        dataFixerBuilder.addFixer(new ItemInstanceMapIdFix(schema41, false));
        Schema schema42 = dataFixerBuilder.addSchema(1451, 4, Schema1451v4::new);
        dataFixerBuilder.addFixer(new BlockNameFlatteningFix(schema42, true));
        dataFixerBuilder.addFixer(new ItemInstanceTheFlatteningFix(schema42, false));
        Schema schema43 = dataFixerBuilder.addSchema(1451, 5, Schema1451v5::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema43, "RemoveNoteBlockFlowerPotFix", TypeReferences.BLOCK_ENTITY));
        dataFixerBuilder.addFixer(new ItemInstanceSpawnEggFix(schema43, false));
        dataFixerBuilder.addFixer(new EntityWolfColorFix(schema43, false));
        dataFixerBuilder.addFixer(new BlockEntityBannerColorFix(schema43, false));
        dataFixerBuilder.addFixer(new LevelFlatGeneratorInfoFix(schema43, false));
        Schema schema44 = dataFixerBuilder.addSchema(1451, 6, Schema1451v6::new);
        dataFixerBuilder.addFixer(new StatsCounterFix(schema44, true));
        dataFixerBuilder.addFixer(new WriteAndReadFix(schema44, "Rewrite objectives", TypeReferences.OBJECTIVE));
        dataFixerBuilder.addFixer(new BlockEntityJukeboxFix(schema44, false));
        Schema schema45 = dataFixerBuilder.addSchema(1451, 7, Schema1451v7::new);
        dataFixerBuilder.addFixer(new SavedDataVillageCropFix(schema45, true));
        Schema schema46 = dataFixerBuilder.addSchema(1451, 7, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new VillagerTradeFix(schema46, false));
        Schema schema47 = dataFixerBuilder.addSchema(1456, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityItemFrameDirectionFix(schema47, false));
        Schema schema48 = dataFixerBuilder.addSchema(1458, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityCustomNameToTextFix(schema48, false));
        dataFixerBuilder.addFixer(new ItemCustomNameToComponentFix(schema48, false));
        dataFixerBuilder.addFixer(new BlockEntityCustomNameToTextFix(schema48, false));
        Schema schema49 = dataFixerBuilder.addSchema(1460, Schema1460::new);
        dataFixerBuilder.addFixer(new EntityPaintingMotiveFix(schema49, false));
        Schema schema50 = dataFixerBuilder.addSchema(1466, Schema1466::new);
        dataFixerBuilder.addFixer(new ChunkToProtoChunkFix(schema50, true));
        Schema schema51 = dataFixerBuilder.addSchema(1470, Schema1470::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema51, "Add 1.13 entities fix", TypeReferences.ENTITY));
        Schema schema52 = dataFixerBuilder.addSchema(1474, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ColorlessShulkerEntityFix(schema52, false));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema52, "Colorless shulker block fixer", (string) -> {
            return Objects.equals(IdentifierNormalizingSchema.normalize(string), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : string;
        }));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema52, "Colorless shulker item fixer", (string) -> {
            return Objects.equals(IdentifierNormalizingSchema.normalize(string), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : string;
        }));
        Schema schema53 = dataFixerBuilder.addSchema(1475, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema53, "Flowing fixer", replacing(ImmutableMap.of("minecraft:flowing_water", "minecraft:water", "minecraft:flowing_lava", "minecraft:lava"))));
        Schema schema54 = dataFixerBuilder.addSchema(1480, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema54, "Rename coral blocks", replacing(LegacyCoralBlockMapping.MAP)));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema54, "Rename coral items", replacing(LegacyCoralBlockMapping.MAP)));
        Schema schema55 = dataFixerBuilder.addSchema(1481, Schema1481::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema55, "Add conduit", TypeReferences.BLOCK_ENTITY));
        Schema schema56 = dataFixerBuilder.addSchema(1483, Schema1483::new);
        dataFixerBuilder.addFixer(new EntityPufferfishRenameFix(schema56, true));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema56, "Rename pufferfish egg item", replacing(EntityPufferfishRenameFix.RENAMED_FISH)));
        Schema schema57 = dataFixerBuilder.addSchema(1484, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema57, "Rename seagrass items", replacing(ImmutableMap.of("minecraft:sea_grass", "minecraft:seagrass", "minecraft:tall_sea_grass", "minecraft:tall_seagrass"))));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema57, "Rename seagrass blocks", replacing(ImmutableMap.of("minecraft:sea_grass", "minecraft:seagrass", "minecraft:tall_sea_grass", "minecraft:tall_seagrass"))));
        dataFixerBuilder.addFixer(new HeightmapRenamingFix(schema57, false));
        Schema schema58 = dataFixerBuilder.addSchema(1486, Schema1486::new);
        dataFixerBuilder.addFixer(new EntityCodSalmonFix(schema58, true));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema58, "Rename cod/salmon egg items", replacing(EntityCodSalmonFix.SPAWN_EGGS)));
        Schema schema59 = dataFixerBuilder.addSchema(1487, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema59, "Rename prismarine_brick(s)_* blocks", replacing(ImmutableMap.of("minecraft:prismarine_bricks_slab", "minecraft:prismarine_brick_slab", "minecraft:prismarine_bricks_stairs", "minecraft:prismarine_brick_stairs"))));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema59, "Rename prismarine_brick(s)_* items", replacing(ImmutableMap.of("minecraft:prismarine_bricks_slab", "minecraft:prismarine_brick_slab", "minecraft:prismarine_bricks_stairs", "minecraft:prismarine_brick_stairs"))));
        Schema schema60 = dataFixerBuilder.addSchema(1488, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema60, "Rename kelp/kelptop", replacing(ImmutableMap.of("minecraft:kelp_top", "minecraft:kelp", "minecraft:kelp", "minecraft:kelp_plant"))));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema60, "Rename kelptop", replacing("minecraft:kelp_top", "minecraft:kelp")));
        dataFixerBuilder.addFixer(new ChoiceFix(schema60, false, "Command block block entity custom name fix", TypeReferences.BLOCK_ENTITY, "minecraft:command_block") {
            protected Typed<?> transform(Typed<?> typed) {
                return typed.update(DSL.remainderFinder(), EntityCustomNameToTextFix::fixCustomName);
            }
        });
        dataFixerBuilder.addFixer(new ChoiceFix(schema60, false, "Command block minecart custom name fix", TypeReferences.ENTITY, "minecraft:commandblock_minecart") {
            protected Typed<?> transform(Typed<?> typed) {
                return typed.update(DSL.remainderFinder(), EntityCustomNameToTextFix::fixCustomName);
            }
        });
        dataFixerBuilder.addFixer(new IglooMetadataRemovalFix(schema60, false));
        Schema schema61 = dataFixerBuilder.addSchema(1490, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema61, "Rename melon_block", replacing("minecraft:melon_block", "minecraft:melon")));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema61, "Rename melon_block/melon/speckled_melon", replacing(ImmutableMap.of("minecraft:melon_block", "minecraft:melon", "minecraft:melon", "minecraft:melon_slice", "minecraft:speckled_melon", "minecraft:glistering_melon_slice"))));
        Schema schema62 = dataFixerBuilder.addSchema(1492, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ChunkStructuresTemplateRenameFix(schema62, false));
        Schema schema63 = dataFixerBuilder.addSchema(1494, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ItemStackEnchantmentFix(schema63, false));
        Schema schema64 = dataFixerBuilder.addSchema(1496, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new LeavesFix(schema64, false));
        Schema schema65 = dataFixerBuilder.addSchema(1500, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BlockEntityKeepPacked(schema65, false));
        Schema schema66 = dataFixerBuilder.addSchema(1501, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new AdvancementsFix(schema66, false));
        Schema schema67 = dataFixerBuilder.addSchema(1502, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new RecipeFix(schema67, false));
        Schema schema68 = dataFixerBuilder.addSchema(1506, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new LevelDataGeneratorOptionsFix(schema68, false));
        Schema schema69 = dataFixerBuilder.addSchema(1510, Schema1510::new);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema69, "Block renamening fix", replacing(EntityTheRenameningBlock.BLOCKS)));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema69, "Item renamening fix", replacing(EntityTheRenameningBlock.ITEMS)));
        dataFixerBuilder.addFixer(new RecipeRenamingFix(schema69, false));
        dataFixerBuilder.addFixer(new EntityTheRenameningBlock(schema69, true));
        dataFixerBuilder.addFixer(new StatsRenameFix(schema69, "SwimStatsRenameFix", ImmutableMap.of("minecraft:swim_one_cm", "minecraft:walk_on_water_one_cm", "minecraft:dive_one_cm", "minecraft:walk_under_water_one_cm")));
        Schema schema70 = dataFixerBuilder.addSchema(1514, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ObjectiveDisplayNameFix(schema70, false));
        dataFixerBuilder.addFixer(new TeamDisplayNameFix(schema70, false));
        dataFixerBuilder.addFixer(new ObjectiveRenderTypeFix(schema70, false));
        Schema schema71 = dataFixerBuilder.addSchema(1515, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema71, "Rename coral fan blocks", replacing(LegacyCoralFanBlockMapping.MAP)));
        Schema schema72 = dataFixerBuilder.addSchema(1624, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new AddTrappedChestFix(schema72, false));
        Schema schema73 = dataFixerBuilder.addSchema(1800, Schema1800::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema73, "Added 1.14 mobs fix", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema73, "Rename dye items", replacing(LegacyDyeItemMapping.MAP)));
        Schema schema74 = dataFixerBuilder.addSchema(1801, Schema1801::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema74, "Added Illager Beast", TypeReferences.ENTITY));
        Schema schema75 = dataFixerBuilder.addSchema(1802, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(BlockNameFix.create(schema75, "Rename sign blocks & stone slabs", replacing(ImmutableMap.of("minecraft:stone_slab", "minecraft:smooth_stone_slab", "minecraft:sign", "minecraft:oak_sign", "minecraft:wall_sign", "minecraft:oak_wall_sign"))));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema75, "Rename sign item & stone slabs", replacing(ImmutableMap.of("minecraft:stone_slab", "minecraft:smooth_stone_slab", "minecraft:sign", "minecraft:oak_sign"))));
        Schema schema76 = dataFixerBuilder.addSchema(1803, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ItemLoreToTextFix(schema76, false));
        Schema schema77 = dataFixerBuilder.addSchema(1904, Schema1904::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema77, "Added Cats", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(new EntityCatSplitFix(schema77, false));
        Schema schema78 = dataFixerBuilder.addSchema(1905, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ChunkStatusFix(schema78, false));
        Schema schema79 = dataFixerBuilder.addSchema(1906, Schema1906::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema79, "Add POI Blocks", TypeReferences.BLOCK_ENTITY));
        Schema schema80 = dataFixerBuilder.addSchema(1909, Schema1909::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema80, "Add jigsaw", TypeReferences.BLOCK_ENTITY));
        Schema schema81 = dataFixerBuilder.addSchema(1911, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ChunkStatusFix2(schema81, false));
        Schema schema82 = dataFixerBuilder.addSchema(1917, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new CatTypeFix(schema82, false));
        Schema schema83 = dataFixerBuilder.addSchema(1918, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new VillagerProfessionFix(schema83, "minecraft:villager"));
        dataFixerBuilder.addFixer(new VillagerProfessionFix(schema83, "minecraft:zombie_villager"));
        Schema schema84 = dataFixerBuilder.addSchema(1920, Schema1920::new);
        dataFixerBuilder.addFixer(new NewVillageFix(schema84, false));
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema84, "Add campfire", TypeReferences.BLOCK_ENTITY));
        Schema schema85 = dataFixerBuilder.addSchema(1925, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new MapIdFix(schema85, false));
        Schema schema86 = dataFixerBuilder.addSchema(1928, Schema1928::new);
        dataFixerBuilder.addFixer(new EntityRavagerRenameFix(schema86, true));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema86, "Rename ravager egg item", replacing(EntityRavagerRenameFix.ITEMS)));
        Schema schema87 = dataFixerBuilder.addSchema(1929, Schema1929::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema87, "Add Wandering Trader and Trader Llama", TypeReferences.ENTITY));
        Schema schema88 = dataFixerBuilder.addSchema(1931, Schema1931::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema88, "Added Fox", TypeReferences.ENTITY));
        Schema schema89 = dataFixerBuilder.addSchema(1936, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OptionsAddTextBackgroundFix(schema89, false));
        Schema schema90 = dataFixerBuilder.addSchema(1946, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new PointOfInterestReorganizationFix(schema90, false));
        Schema schema91 = dataFixerBuilder.addSchema(1948, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OminousBannerItemRenameFix(schema91, false));
        Schema schema92 = dataFixerBuilder.addSchema(1953, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new OminousBannerBlockEntityRenameFix(schema92, false));
        Schema schema93 = dataFixerBuilder.addSchema(1955, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new VillagerXpRebuildFix(schema93, false));
        dataFixerBuilder.addFixer(new ZombieVillagerXpRebuildFix(schema93, false));
        Schema schema94 = dataFixerBuilder.addSchema(1961, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ChunkLightRemoveFix(schema94, false));
        Schema schema95 = dataFixerBuilder.addSchema(1963, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new RemoveGolemGossipFix(schema95, false));
        Schema schema96 = dataFixerBuilder.addSchema(2100, Schema2100::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema96, "Added Bee and Bee Stinger", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema96, "Add beehive", TypeReferences.BLOCK_ENTITY));
        dataFixerBuilder.addFixer(new RecipeRenameFix(schema96, false, "Rename sugar recipe", replacing("minecraft:sugar", "sugar_from_sugar_cane")));
        dataFixerBuilder.addFixer(new AdvancementRenameFix(schema96, false, "Rename sugar recipe advancement", replacing("minecraft:recipes/misc/sugar", "minecraft:recipes/misc/sugar_from_sugar_cane")));
        Schema schema97 = dataFixerBuilder.addSchema(2202, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BiomeFormatFix(schema97, false));
        Schema schema98 = dataFixerBuilder.addSchema(2209, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema98, "Rename bee_hive item to beehive", replacing("minecraft:bee_hive", "minecraft:beehive")));
        dataFixerBuilder.addFixer(new BeehiveRenameFix(schema98));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema98, "Rename bee_hive block to beehive", replacing("minecraft:bee_hive", "minecraft:beehive")));
        Schema schema99 = dataFixerBuilder.addSchema(2211, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new StructureReferenceFix(schema99, false));
        Schema schema100 = dataFixerBuilder.addSchema(2218, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new RemovePoiValidTagFix(schema100, false));
        Schema schema101 = dataFixerBuilder.addSchema(2501, Schema2501::new);
        dataFixerBuilder.addFixer(new FurnaceRecipesFix(schema101, true));
        Schema schema102 = dataFixerBuilder.addSchema(2502, Schema2502::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema102, "Added Hoglin", TypeReferences.ENTITY));
        Schema schema103 = dataFixerBuilder.addSchema(2503, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new WallPropertyFix(schema103, false));
        dataFixerBuilder.addFixer(new AdvancementRenameFix(schema103, false, "Composter category change", replacing("minecraft:recipes/misc/composter", "minecraft:recipes/decorations/composter")));
        Schema schema104 = dataFixerBuilder.addSchema(2505, Schema2505::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema104, "Added Piglin", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(new MemoryExpiryDataFix(schema104, "minecraft:villager"));
        Schema schema105 = dataFixerBuilder.addSchema(2508, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema105, "Renamed fungi items to fungus", replacing(ImmutableMap.of("minecraft:warped_fungi", "minecraft:warped_fungus", "minecraft:crimson_fungi", "minecraft:crimson_fungus"))));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema105, "Renamed fungi blocks to fungus", replacing(ImmutableMap.of("minecraft:warped_fungi", "minecraft:warped_fungus", "minecraft:crimson_fungi", "minecraft:crimson_fungus"))));
        Schema schema106 = dataFixerBuilder.addSchema(2509, Schema2509::new);
        dataFixerBuilder.addFixer(new EntityZombifiedPiglinRenameFix(schema106));
        dataFixerBuilder.addFixer(ItemNameFix.create(schema106, "Rename zombie pigman egg item", replacing(EntityZombifiedPiglinRenameFix.RENAMES)));
        Schema schema107 = dataFixerBuilder.addSchema(2511, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityProjectileOwnerFix(schema107));
        Schema schema108 = dataFixerBuilder.addSchema(2514, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityUuidFix(schema108));
        dataFixerBuilder.addFixer(new BlockEntityUuidFix(schema108));
        dataFixerBuilder.addFixer(new PlayerUuidFix(schema108));
        dataFixerBuilder.addFixer(new WorldUuidFix(schema108));
        dataFixerBuilder.addFixer(new PersistentStateUuidFix(schema108));
        dataFixerBuilder.addFixer(new ItemStackUuidFix(schema108));
        Schema schema109 = dataFixerBuilder.addSchema(2516, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new VillagerGossipFix(schema109, "minecraft:villager"));
        dataFixerBuilder.addFixer(new VillagerGossipFix(schema109, "minecraft:zombie_villager"));
        Schema schema110 = dataFixerBuilder.addSchema(2518, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new JigsawPropertiesFix(schema110, false));
        dataFixerBuilder.addFixer(new JigsawRotationFix(schema110, false));
        Schema schema111 = dataFixerBuilder.addSchema(2519, Schema2519::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema111, "Added Strider", TypeReferences.ENTITY));
        Schema schema112 = dataFixerBuilder.addSchema(2522, Schema2522::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema112, "Added Zoglin", TypeReferences.ENTITY));
        Schema schema113 = dataFixerBuilder.addSchema(2523, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new RenameItemStackAttributesFix(schema113));
        Schema schema114 = dataFixerBuilder.addSchema(2527, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BitStorageAlignFix(schema114));
        Schema schema115 = dataFixerBuilder.addSchema(2528, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema115, "Rename soul fire torch and soul fire lantern", replacing(ImmutableMap.of("minecraft:soul_fire_torch", "minecraft:soul_torch", "minecraft:soul_fire_lantern", "minecraft:soul_lantern"))));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema115, "Rename soul fire torch and soul fire lantern", replacing(ImmutableMap.of("minecraft:soul_fire_torch", "minecraft:soul_torch", "minecraft:soul_fire_wall_torch", "minecraft:soul_wall_torch", "minecraft:soul_fire_lantern", "minecraft:soul_lantern"))));
        Schema schema116 = dataFixerBuilder.addSchema(2529, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new StriderGravityFix(schema116, false));
        Schema schema117 = dataFixerBuilder.addSchema(2531, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new RedstoneConnectionsFix(schema117));
        Schema schema118 = dataFixerBuilder.addSchema(2533, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new VillagerFollowRangeFix(schema118));
        Schema schema119 = dataFixerBuilder.addSchema(2535, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new EntityShulkerRotationFix(schema119));
        Schema schema120 = dataFixerBuilder.addSchema(2550, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new StructureSeparationDataFix(schema120));
        Schema schema121 = dataFixerBuilder.addSchema(2551, Schema2551::new);
        dataFixerBuilder.addFixer(new WriteAndReadFix(schema121, "add types to WorldGenData", TypeReferences.CHUNK_GENERATOR_SETTINGS));
        Schema schema122 = dataFixerBuilder.addSchema(2552, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BiomeRenameFix(schema122, false, "Nether biome rename", ImmutableMap.of("minecraft:nether", "minecraft:nether_wastes")));
        Schema schema123 = dataFixerBuilder.addSchema(2553, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BiomesFix(schema123, false));
        Schema schema124 = dataFixerBuilder.addSchema(2558, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new MissingDimensionFix(schema124, false));
        dataFixerBuilder.addFixer(new OptionFix(schema124, false, "Rename swapHands setting", "key_key.swapHands", "key_key.swapOffhand"));
        Schema schema125 = dataFixerBuilder.addSchema(2568, Schema2568::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema125, "Added Piglin Brute", TypeReferences.ENTITY));
        Schema schema126 = dataFixerBuilder.addSchema(2571, Schema2571::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema126, "Added Goat", TypeReferences.ENTITY));
        Schema schema127 = dataFixerBuilder.addSchema(2679, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new CauldronRenameFix(schema127, false));
        Schema schema128 = dataFixerBuilder.addSchema(2680, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema128, "Renamed grass path item to dirt path", replacing("minecraft:grass_path", "minecraft:dirt_path")));
        dataFixerBuilder.addFixer(JigsawBlockNameFix.create(schema128, "Renamed grass path block to dirt path", replacing("minecraft:grass_path", "minecraft:dirt_path")));
        Schema schema129 = dataFixerBuilder.addSchema(2684, Schema2684::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema129, "Added Sculk Sensor", TypeReferences.BLOCK_ENTITY));
        Schema schema130 = dataFixerBuilder.addSchema(2686, Schema2686::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema130, "Added Axolotl", TypeReferences.ENTITY));
        Schema schema131 = dataFixerBuilder.addSchema(2688, Schema2688::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema131, "Added Glow Squid", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema131, "Added Glow Item Frame", TypeReferences.ENTITY));
        Schema schema132 = dataFixerBuilder.addSchema(2690, EMPTY_IDENTIFIER_NORMALIZE);
        ImmutableMap<String, String> immutableMap = ImmutableMap.builder().put("minecraft:weathered_copper_block", "minecraft:oxidized_copper_block").put("minecraft:semi_weathered_copper_block", "minecraft:weathered_copper_block").put("minecraft:lightly_weathered_copper_block", "minecraft:exposed_copper_block").put("minecraft:weathered_cut_copper", "minecraft:oxidized_cut_copper").put("minecraft:semi_weathered_cut_copper", "minecraft:weathered_cut_copper").put("minecraft:lightly_weathered_cut_copper", "minecraft:exposed_cut_copper").put("minecraft:weathered_cut_copper_stairs", "minecraft:oxidized_cut_copper_stairs").put("minecraft:semi_weathered_cut_copper_stairs", "minecraft:weathered_cut_copper_stairs").put("minecraft:lightly_weathered_cut_copper_stairs", "minecraft:exposed_cut_copper_stairs").put("minecraft:weathered_cut_copper_slab", "minecraft:oxidized_cut_copper_slab").put("minecraft:semi_weathered_cut_copper_slab", "minecraft:weathered_cut_copper_slab").put("minecraft:lightly_weathered_cut_copper_slab", "minecraft:exposed_cut_copper_slab").put("minecraft:waxed_semi_weathered_copper", "minecraft:waxed_weathered_copper").put("minecraft:waxed_lightly_weathered_copper", "minecraft:waxed_exposed_copper").put("minecraft:waxed_semi_weathered_cut_copper", "minecraft:waxed_weathered_cut_copper").put("minecraft:waxed_lightly_weathered_cut_copper", "minecraft:waxed_exposed_cut_copper").put("minecraft:waxed_semi_weathered_cut_copper_stairs", "minecraft:waxed_weathered_cut_copper_stairs").put("minecraft:waxed_lightly_weathered_cut_copper_stairs", "minecraft:waxed_exposed_cut_copper_stairs").put("minecraft:waxed_semi_weathered_cut_copper_slab", "minecraft:waxed_weathered_cut_copper_slab").put("minecraft:waxed_lightly_weathered_cut_copper_slab", "minecraft:waxed_exposed_cut_copper_slab").build().of();
        dataFixerBuilder.addFixer(ItemNameFix.create(schema132, "Renamed copper block items to new oxidized terms", replacing(immutableMap)));
        dataFixerBuilder.addFixer(JigsawBlockNameFix.create(schema132, "Renamed copper blocks to new oxidized terms", replacing(immutableMap)));
        Schema schema133 = dataFixerBuilder.addSchema(2691, EMPTY_IDENTIFIER_NORMALIZE);
        ImmutableMap<String, String> immutableMap2 = ImmutableMap.builder().put("minecraft:waxed_copper", "minecraft:waxed_copper_block").put("minecraft:oxidized_copper_block", "minecraft:oxidized_copper").put("minecraft:weathered_copper_block", "minecraft:weathered_copper").put("minecraft:exposed_copper_block", "minecraft:exposed_copper").build().of();
        dataFixerBuilder.addFixer(ItemNameFix.create(schema133, "Rename copper item suffixes", replacing(immutableMap2)));
        dataFixerBuilder.addFixer(JigsawBlockNameFix.create(schema133, "Rename copper blocks suffixes", replacing(immutableMap2)));
        Schema schema134 = dataFixerBuilder.addSchema(2693, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema134, TypeReferences.CHUNK_GENERATOR_SETTINGS, "has_increased_height_already", false));
        Schema schema135 = dataFixerBuilder.addSchema(2696, EMPTY_IDENTIFIER_NORMALIZE);
        ImmutableMap<String, String> immutableMap3 = ImmutableMap.builder().put("minecraft:grimstone", "minecraft:deepslate").put("minecraft:grimstone_slab", "minecraft:cobbled_deepslate_slab").put("minecraft:grimstone_stairs", "minecraft:cobbled_deepslate_stairs").put("minecraft:grimstone_wall", "minecraft:cobbled_deepslate_wall").put("minecraft:polished_grimstone", "minecraft:polished_deepslate").put("minecraft:polished_grimstone_slab", "minecraft:polished_deepslate_slab").put("minecraft:polished_grimstone_stairs", "minecraft:polished_deepslate_stairs").put("minecraft:polished_grimstone_wall", "minecraft:polished_deepslate_wall").put("minecraft:grimstone_tiles", "minecraft:deepslate_tiles").put("minecraft:grimstone_tile_slab", "minecraft:deepslate_tile_slab").put("minecraft:grimstone_tile_stairs", "minecraft:deepslate_tile_stairs").put("minecraft:grimstone_tile_wall", "minecraft:deepslate_tile_wall").put("minecraft:grimstone_bricks", "minecraft:deepslate_bricks").put("minecraft:grimstone_brick_slab", "minecraft:deepslate_brick_slab").put("minecraft:grimstone_brick_stairs", "minecraft:deepslate_brick_stairs").put("minecraft:grimstone_brick_wall", "minecraft:deepslate_brick_wall").put("minecraft:chiseled_grimstone", "minecraft:chiseled_deepslate").build().of();
        dataFixerBuilder.addFixer(ItemNameFix.create(schema135, "Renamed grimstone block items to deepslate", replacing(immutableMap3)));
        dataFixerBuilder.addFixer(JigsawBlockNameFix.create(schema135, "Renamed grimstone blocks to deepslate", replacing(immutableMap3)));
        Schema schema136 = dataFixerBuilder.addSchema(2700, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(JigsawBlockNameFix.create(schema136, "Renamed cave vines blocks", replacing(ImmutableMap.of("minecraft:cave_vines_head", "minecraft:cave_vines", "minecraft:cave_vines_body", "minecraft:cave_vines_plant"))));
        Schema schema137 = dataFixerBuilder.addSchema(2701, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new StructureFeatureChildrenPoolElementFix(schema137));
        Schema schema138 = dataFixerBuilder.addSchema(2702, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ArrowPickupFix(schema138));
        Schema schema139 = dataFixerBuilder.addSchema(2704, Schema2704::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema139, "Added Goat", TypeReferences.ENTITY));
        Schema schema140 = dataFixerBuilder.addSchema(2707, Schema2707::new);
        dataFixerBuilder.addFixer(new ChoiceTypesFix(schema140, "Added Marker", TypeReferences.ENTITY));
        dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema140, TypeReferences.CHUNK_GENERATOR_SETTINGS, "has_increased_height_already", true));
        Schema schema141 = dataFixerBuilder.addSchema(2710, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new StatsRenameFix(schema141, "Renamed play_one_minute stat to play_time", ImmutableMap.of("minecraft:play_one_minute", "minecraft:play_time")));
        Schema schema142 = dataFixerBuilder.addSchema(2717, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(ItemNameFix.create(schema142, "Rename azalea_leaves_flowers", replacing(ImmutableMap.of("minecraft:azalea_leaves_flowers", "minecraft:flowering_azalea_leaves"))));
        dataFixerBuilder.addFixer(BlockNameFix.create(schema142, "Rename azalea_leaves_flowers items", replacing(ImmutableMap.of("minecraft:azalea_leaves_flowers", "minecraft:flowering_azalea_leaves"))));
        Schema schema143 = dataFixerBuilder.addSchema(2825, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new AddFlagIfNotPresentFix(schema143, TypeReferences.CHUNK_GENERATOR_SETTINGS, "has_increased_height_already", false));
        Schema schema144 = dataFixerBuilder.addSchema(2831, Schema2831::new);
        dataFixerBuilder.addFixer(new UntaggedSpawnerFix(schema144));
        Schema schema145 = dataFixerBuilder.addSchema(2832, Schema2832::new);
        dataFixerBuilder.addFixer(new WorldGenSettingsHeightAndBiomeFix(schema145));
        dataFixerBuilder.addFixer(new ChunkHeightAndBiomeFix(schema145));
        Schema schema146 = dataFixerBuilder.addSchema(2833, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new WorldGenSettingsDisallowOldCustomWorldsFix(schema146));
        Schema schema147 = dataFixerBuilder.addSchema(2838, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BiomeRenameFix(schema147, false, "Caves and Cliffs biome renames", LegacyBiomeMapping.MAP));
        Schema schema148 = dataFixerBuilder.addSchema(2841, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new ProtoChunkTickListFix(schema148));
        Schema schema149 = dataFixerBuilder.addSchema(2842, Schema2842::new);
        dataFixerBuilder.addFixer(new ChunkLevelTagRenameFix(schema149));
        Schema schema150 = dataFixerBuilder.addSchema(2843, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new BiomeRenameFix(schema150, false, "Remove Deep Warm Ocean", Map.of("minecraft:deep_warm_ocean", "minecraft:warm_ocean")));
        Schema schema151 = dataFixerBuilder.addSchema(2846, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new AdvancementRenameFix(schema151, false, "Rename some C&C part 2 advancements", replacing(ImmutableMap.of("minecraft:husbandry/play_jukebox_in_meadows", "minecraft:adventure/play_jukebox_in_meadows", "minecraft:adventure/caves_and_cliff", "minecraft:adventure/fall_from_world_height", "minecraft:adventure/ride_strider_in_overworld_lava", "minecraft:nether/ride_strider_in_overworld_lava"))));
        Schema schema152 = dataFixerBuilder.addSchema(2852, EMPTY_IDENTIFIER_NORMALIZE);
        dataFixerBuilder.addFixer(new WorldGenSettingsDisallowOldCustomWorldsFix(schema152));
    }

    private static UnaryOperator<String> replacing(Map<String, String> map) {
        return (string) -> {
            return (String)map.getOrDefault(string, string);
        };
    }

    private static UnaryOperator<String> replacing(String string, String string2) {
        return (string3) -> {
            return Objects.equals(string3, string) ? string2 : string3;
        };
    }
}
